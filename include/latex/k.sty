% Copyright (c) 2012-2014 K Team. All Rights Reserved.
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{k}[2012/02/14 Package for typesetting K Framework definitions http://k-framework.org]

\RequirePackage{bookmark}
\RequirePackage{kvoptions}
\RequirePackage{ifthen}
\RequirePackage{xifthen}%extension of ifthen
% \RequirePackage{etoolbox}
% \RequirePackage{etextools} % for xifstrequal
% \RequirePackage{stringstrings} % for \stringlength

% for comment env
\RequirePackage{verbatim}

%%% PACKAGE OPTIONS

\SetupKeyvalOptions{family=k,prefix=k@}


\DeclareStringOption[bubble]{style}  % the default style for cells & stuff
\DeclareBoolOption{tight}  % whether (bubble) cells should be tight or not
\DeclareBoolOption{beamer}  % whether (bubble) cells should be tight or not
\DeclareBoolOption{poster}  % to generate a poster from the definition

% To render modules as \section definitions.
\DeclareBoolOption{modulesAsSections}

%%% Dynamically alterable options

% If true, in math mode cell wals are colored to their declared color.
% If false, cell wals always have mcellBracketDefaultColor.
%(better emphasizes the diverse styles inside a cell)
%Only relevant for math mode. In bubble mode cells are always colored.
\DeclareBoolOption{coloredCellBrackets}

%true = cell body colored in the cell color, false = black cell body
\DeclareBoolOption{coloredCellBody}

%Various lengths governing syntax and rule style

% Indent of a module item - syntax, rule or context.
%\newlength{\k@indent}
%\setlength{\k@indent}{0em}
\DeclareStringOption[0em]{indent}

% Indent of a hanging long syntax definition when automatically line breaking.
\DeclareStringOption[15pt]{syntaxHangindent}

% Indent of a hanging long rules when automatically line breaking.
\DeclareStringOption[15pt]{ruleHangindent}

% vspace at the beginning of a syntax/rule
\DeclareStringOption[2ex]{StartVspace}

% vspace at the end of a syntax/rule
\DeclareStringOption[2ex]{EndVspace}


%The amount of indent for non-lonely \reduce tags with length at least \kReduceIndentThreshold
\DeclareStringOption[2em]{nonLonelyReduceIndent}

%The minimal width of a \reduce in order to be indented
%Set to 0 to disable this indentation
\DeclareStringOption[200pt]{reduceIndentThreshold}

% inner ysep for the LHS node of a rewrite, alters compactness
\DeclareStringOption[1ex]{rewriteLHSInnerYSep}

% inner ysep for the LHS node of a rewrite, alters compactness
\DeclareStringOption[0.5ex]{rewriteRHSInnerYSep}

% One more option to control compactness of rewrites
% Option: normal, maximal.
% Maximal saves a little vspace when one side of a rewrite is just a dot, but looks uglier.
\DeclareStringOption[normal]{rewriteCompactness}

\ProcessKeyvalOptions*

% Usage Examples %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Next command uses the default style (bubble) with tight edges for cells.
% \usepackage[tight]{k}
%
% Next command changes the default style to mathematic cells.
% \usepackage[style=math]{k}
%
% Next command enables poster mode with mathematic cells
% \usepackage[style=math,poster]{k}
%
% Next command can be used to include k definitions in beamer presentations
% \usepackage[beamer]{k}
% To do that, though, some of the options required by k need to be passed
% to beamer, e.g. like:
% \documentclass[pdftex,usenames,dvipsnames,svgnames,x11names]{beamer}
%
% Use next command to temporary change the default style inside a definition
% \begin{k}[math]
%  . . .
% \end{k}
% If the default was set to math, use bubble instead of math above.

% Some exported commands (useful for manually writing K):
% \kall, \kprefix, \ksuffix, and \kmiddle are used to specify cells which are
% either complete, open to the right, open to the left, and open both ways,
% respectively .

% All options from coloredCellBrackets can be dynamically altered
% in the middle of the document, using \setkeys.
% For example:
% \setkeys{k}{coloredCellBrackets=false,StartVspace=0pt,EndVspace=0pt}

\ifthenelse{\equal{\k@style}{bubble}}{
  \newcommand{\kall}[3][white]{\ball{#1}{#2}{#3}}
  \newcommand{\kallLarge}[3][white]{\ballLarge{#1}{#2}{#3}}
  \newcommand{\kprefix}[3][white]{\bprefix{#1}{#2}{#3}}
  \newcommand{\ksuffix}[3][white]{\bsuffix{#1}{#2}{#3}}
  \newcommand{\kmiddle}[3][white]{\bmiddle{#1}{#2}{#3}}
  \newcommand{\kdot}{\bdot}
  \newcommand{\AnyVar}[1][]{\bAnyVar{#1}}
}{% else, assume default style is math
  \newcommand{\kall}[3][white]{\mall{#1}{#2}{#3}}
  \newcommand{\kallLarge}[3][white]{\mallLarge{#1}{#2}{#3}}
  \newcommand{\kprefix}[3][white]{\mprefix{#1}{#2}{#3}}
  \newcommand{\ksuffix}[3][white]{\msuffix{#1}{#2}{#3}}
  \newcommand{\kmiddle}[3][white]{\mmiddle{#1}{#2}{#3}}
  \newcommand{\kdot}{\mdot}
  \newcommand{\AnyVar}[1][]{\mAnyVar{#1}}
}


%T1 encoding supports more glyphs than OT1, so is preferred nowadys. Better handling of hyphenation.
%http://tex.stackexchange.com/questions/664/why-should-i-use-usepackaget1fontenc
\RequirePackage[T1]{fontenc}

\RequirePackage{textcomp}


\ifk@beamer
\else
  \RequirePackage{hyperref}
  \RequirePackage{xcolor}
\fi

\ifk@poster
  %%% PDF functionality.
  \RequirePackage{pdfcomment}
  %%% Layout and design.

  % microtype is nice, but seems to create strange problems
  % \RequirePackage{microtype}

  \RequirePackage{times}
  \RequirePackage[scaled]{berasans}
  \RequirePackage[scaled]{beramono}

  \RequirePackage[small,compact]{titlesec}

  %\titleformat{command}[shape]{format}{label}{sep}{before}[after]
  % shape ::= hang | block | display | runin | leftmargin | rightmargin
  %         | drop | wrap | frame
  % sep is mandatory to be a length.
  % more on http://www.ctex.org/documents/packages/layout/titlesec.pdf
  \titleformat{\subsubsection}[runin]{\bfseries}{}{0pt}{}[.\hspace*{1ex}]

  % PDF link colors
  % The color values and names come from the Tango Icon Scheme
  \definecolor{SkyBlue2}{rgb}{.204, .396, .643}
  \definecolor{ScarletRed3}{rgb}{.643, 0, 0}
  \definecolor{Chocolate3}{rgb}{.561, .349, .008}

  \hypersetup{%
    % Color the text of links instead of framing them.
    colorlinks=true,
    linkcolor=SkyBlue2,
    urlcolor=ScarletRed3,
    filecolor=Chocolate3
  }
\else% not poster
  \newcommand{\organization}{\date}
\fi

%%% Additional symbols and notation.

\RequirePackage{amsmath}
\RequirePackage{amssymb}
\RequirePackage{stmaryrd}

% Supports big (up to 5 lines) angular brackets. Default amsmath brackets are limited to 3 lines.
\RequirePackage{yhmath}

%%% Graphics.

\RequirePackage{tikz}
\usetikzlibrary{shapes.misc}
\usetikzlibrary{calc}

%%% Auxiliary packages.

%For widthof, heightof
\RequirePackage{calc}

\RequirePackage{ifthen}
\RequirePackage{ifdraft}
\RequirePackage{ucs}
\RequirePackage{xspace}

%for debugging minipages, every boxedminipage could be replaced with minipage
\RequirePackage{boxedminipage}

\makeatletter

% Page Setup %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% To output all definitions, rules, and comments onto a single, long page, we
% take the following steps:
%
% - Wrap the whole document in a 'kdefinition' environment and tell the
%   'preview' package to typeset it onto a single page.  This gives us a single
%   page of output.  Setting a suitable border and the 'tightpage' option
%   adjusts the page height to match the content.
%
% - Finding the correct page width requires two runs of TeX[1].  In the first
%   run, we mark the width of every typeset block (rules, comments, etc.).
%   This information is is written into an auxiliary file of name
%   '\jobname.mrk'.  At the beginning of the second run, we read this file
%   (if it exists), determine the maximum width, and use the maximum as
%   the text width.  If no width information is available, we default to
%   a text width of 16 inches.
%
% ---
% [1] (At least) two runs are necessary anyway: cross-referencing and indexing
%     require them, and so do PDF annotations.
\ifk@poster
  \pagestyle{empty}

  %%% PDF default view

  % Most PDF viewers seem to default to the "fit whole page" view mode.  A single,
  % long page badly fits this behavior, so we request "fit page width" instead.
  \hypersetup{pdfstartview=FitH}

  %%% Use the 'preview' package to typeset everything onto a single page.

  \usepackage[active,tightpage,pdftex]{preview}
  \setlength\PreviewBorder{5pt}
\fi

% Everything within an environment that is marked as \PreviewEnvironment
% is put onto its own page.  Thus, by defining a global environment that
% wraps the whole document, we get all output on a single page.
%
% The 'kompile.pl' script takes care of the wrapping.
\newenvironment{kdefinition}{}{}

\ifk@poster
  \PreviewEnvironment{kdefinition}

  %%% Determine the text width from markers put at the lower right end of
  %   each content block.

  % The system layer of the 'PGF' package hides the gory details.
  % (See "Position Tracking Commands" in Part XIII of the PGF manual.)
  \usepackage{pgfsys}

  % Try to load the marker positions from the previous run.
  \newcounter{k@prevMarkerCount}%
  \InputIfFileExists{\jobname.mrk}{}{}%

  % Set the text width to the maximum of the X coordinates.
  \newlength{\k@maxX}%
  \newlength{\k@currentMarkerX}%

  \whiledo{\value{k@prevMarkerCount} > 0}{%
    \addtocounter{k@prevMarkerCount}{-1}%
    \pgfsys@getposition{k@marker@\the\c@k@prevMarkerCount}{\k@currentMarker}%
    \pgfextractx{\k@currentMarkerX}{\k@currentMarker}%
      \ifthenelse{\lengthtest{\k@currentMarkerX > \k@maxX}}{%
        \setlength{\k@maxX}{\k@currentMarkerX}%
      }{}%
  }%
  \ifthenelse
    {\lengthtest{\k@maxX > 0pt}}
    {\setlength{\textwidth}{\k@maxX}}
    {\setlength{\textwidth}{16in}}%


  % To mark the position, we use the PGF system layer macro \pgfsys@markposition.
  % However, this macro usually writes to the main auxiliary file '\jobname.aux'.
  % This will not work in our setting because the marker positions would then
  % only be available just before the document starts, which is too late to set
  % the text width.  Thus we use our own auxiliary file.

  % Open the marker file for writing.
  \newwrite\k@markerOut
  \immediate\openout\k@markerOut=\jobname.mrk

  \newcounter{k@marker}
  % The marker macro generates the marker names and briefly swaps the output
  % stream that \pgfsys@markposition uses before calling it.
  \newcommand{\k@markPosition}{%
    \let\k@tmpAuxOut=\pgfutil@auxout%
    \let\pgfutil@auxout=\k@markerOut%
    \pgfsys@markposition{k@marker@\the\c@k@marker}%
    \let\pgfutil@auxout=\k@tmpAuxOut%
    \addtocounter{k@marker}{1}%
  }

  % Also store the number of set markers for the next run (for easier looping).
  \AtEndDocument{%
    \immediate\write\k@markerOut{%
      \string\setcounter{k@prevMarkerCount}{\the\c@k@marker}%
    }{}%
  }

  % Title %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  \renewcommand{\@maketitle}{
   \null
   \vspace*{3ex}
   {\Huge \@title}
   \par\vspace*{2ex}
   {\Large \@author}
   \par\vspace*{1ex}
   {\large \@organization}
   \par\vspace*{3ex}
  }

  % Also add respective PDF meta information
  \hypersetup{
    pdftitle={\@title},
    pdfauthor={\@author}
  }

  \let\k@oldTitle=\title
  \renewcommand{\title}[1]{%
    \k@oldTitle{#1}%
    \hypersetup{pdftitle={#1}}%
  }
  \let\k@oldAuthor=\author
  \renewcommand{\author}[1]{%
    \k@oldAuthor{#1}%
    \hypersetup{pdfauthor={#1}}%
  }
  \let\@organization=\@empty
  \newcommand{\organization}[1]{%
    \def\@organization{#1}%
  }

  % Source Comments %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  % Turn off section numbering: all headings will look like they were starred.
  % However, they will still appear in the table of contents (and the bookmarks
  % that hyperref generates for the PDF).
  %
  % Note that hyperref seems to rely on the "secnumdepth" counter for bookmark
  % generation.  Thus, the "traditional" approach \setcounter{secnumdepth}{0}
  % leads to (rather) arbitrary bookmark nestings.
  %
  % Simply remove the labeling number from all titles.
  \titlelabel{}
  % Create TOC entries down to subsections.
  \setcounter{tocdepth}{4}
  % Show the TOC by default.
  \hypersetup{%
    bookmarksopen=true,
    bookmarksopenlevel=2
  }
\else % \ifk@poster
  \newcommand{\k@markPosition}{}
\fi

\usepackage{fancyvrb}
\usepackage{fancybox}

\tikzset{basic comment/.style={
    rectangle,
    rounded corners,
    draw,
    inner sep=.75em
  }
}

\tikzset{comment/.style={basic comment, fill=black!5 } }


% Macros for use in the comments.
\newcommand{\K}{\mbox{$\mathbb{K}$}\xspace}
\newcommand{\KLabel}{\textit{KLabel}\xspace}
\newcommand{\KResult}{\textit{KResult}\xspace}


% Special Glyphs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\lp}{(}
\newcommand{\rp}{)}
\newcommand{\myquote}[1]{
  \k@withTooltip{\text{\rmfamily ``\ttfamily #1\rmfamily ''}}{Constant Sort: String}%
}
\newcommand{\mysinglequote}[1]{\text{\rmfamily "}}
\newcommand{\mybracket}[1]{(#1)}
\newcommand{\sqbracket}[1]{[#1]}
\newcommand{\crlbracket}[1]{\{#1\}}

\newcommand{\nothing}{}
\newcommand{\somespace}{\mathbin{}}
\newcommand{\subscript}[1]{\ensuremath{\nothing_{#1}}}

\newcommand{\kBR}{\\}

% Builtins %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\builtinEqBool}[2]{{#1}==_{\scriptstyle\it Bool}{#2}}
\newcommand{\builtinNeqBool}[2]{{#1}!=_{\scriptstyle\it Bool}{#2}}

\newcommand{\builtinAnd}[2]{{#1}\wedge_{\scriptstyle\it Bool}{#2}}
\newcommand{\builtinOr}[2]{{#1}\vee_{\scriptstyle\it Bool}{#2}}
\newcommand{\builtinXor}[2]{{#1}\oplus_{\scriptstyle\it Bool}{#2}}
\newcommand{\builtinNot}[1]{\neg_{\scriptstyle\it Bool}{#1}}
\newcommand{\builtinImplies}[2]{{#1}\Rightarrow_{\scriptstyle\it Bool}{#2}}

\newcommand{\builtinIntPlus}[2]{{#1}\mathrel{+_{\scriptstyle\it Int}}{#2}}
\newcommand{\builtinIntMinus}[2]{{#1}\mathrel{-_{\scriptstyle\it Int}}{#2}}
\newcommand{\builtinIntTimes}[2]{{#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}}
\newcommand{\builtinIntDiv}[2]{{#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}}
\newcommand{\builtinIntMod}[2]{{#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}}

% Rule formatting settings
%\colorlet{KeywordColor}{Blue}
%\colorlet{RuleNameColor}{Indigo}%Indigo, DarkBlue, DarkViolet, DarkCyan
\colorlet{KeywordColor}{Blue}
\colorlet{RuleNameColor}{Blue}%Indigo, DarkBlue, DarkViolet,
\colorlet{AttribColor}{DarkCyan}

\newcommand{\keyword}[1]{\mbox{\scshape{\color{KeywordColor}#1}}}
\newcommand{\moduleName}[1]{\mbox{\scshape {\color{RuleNameColor} #1}}}
\newcommand{\ruleName}[1]{\mbox{\scshape {\color{RuleNameColor} #1}}}
%\newcommand{\ruleName}[1]{\mbox{\color{RuleNameColor} #1}}

\newcommand{\syntaxKeyword}{\keyword{syntax}\hspace{1em}}

% K Blocks %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newlength{\commentIndent}
\setlength{\commentIndent}{1em}

\newlength{\kblock@indent}

\newenvironment{kblock}[1][\k@style]{%
  \ifk@tight%
    \small%
  \fi%
  \newcommand{\kblock@arg}{#1}%
  \setlength{\kblock@indent}{\parindent}%
  \ifthenelse
    {\equal{#1}{bubble}}
    {%
      \renewcommand{\kall}{\ball}%
      \renewcommand{\kallLarge}{\ballLarge}%
      \renewcommand{\kprefix}{\bprefix}%
      \renewcommand{\ksuffix}{\bsuffix}%
      \renewcommand{\kmiddle}{\bmiddle}%
      \renewcommand{\kdot}{\bdot}%
      \renewcommand{\AnyVar}{\bAnyVar}%
    }
    {\ifthenelse{\equal{#1}{math}}
    {%
      \renewcommand{\kall}{\mall}%
      \renewcommand{\kallLarge}{\mallLarge}%
      \renewcommand{\kprefix}{\mprefix}%
      \renewcommand{\ksuffix}{\msuffix}%
      \renewcommand{\kmiddle}{\mmiddle}%
      \renewcommand{\kdot}{\mdot}%
      \renewcommand{\AnyVar}{\mAnyVar}%
    }
    {\ifthenelse{\equal{#1}{text}}
    {%
      \ifk@poster%
        \setlength{\parindent}{\commentIndent}%
        \indent%
        \begin{Sbox}%
          \begin{minipage}{50em}%
            \addtolength{\parskip}{.5\baselineskip}%
      \else%
      \fi%
    }{}}}%
}
{% end of \newenvironment{kblock}
\ifthenelse{\equal{\kblock@arg}{text}}{%
  \ifk@poster%
      \ \end{minipage}%
    \end{Sbox}%
    \begin{tikzpicture}
      \node[comment]{\TheSbox};
    \end{tikzpicture}%
    \k@markPosition%
  \fi%
  }{%
  }%
  \setlength{\parindent}{\kblock@indent}%
  \par%
}

% Modules %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\ifk@modulesAsSections
  \newenvironment{module}[1]{%
    \section{Module #1}%
  }
  {}

\else
  \newenvironment{module}[1]{%
    \tikzset{comment/.style={basic comment,fill=black!10}}%
    \par\noindent%
    \keyword{module} \moduleName{#1}%
    \setlength{\parindent}{1em}%
    \par\ \par%
  }{%
    \par\noindent\keyword{end module}
    \par\ \par%
  }
\fi


\newenvironment{commentModule}{%
  \setlength{\parindent}{1em}%
  \par\ \par%
}{%
  \par\ \par%
}

\newcommand{\including}[1]{\par\keyword{imports}\ #1\par\ \par}
\newcommand{\modulePlus}{$+$}


% Syntax %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Syntax rules.

\newlength{\savedParindent} % Backup for \parindent
\newlength{\savedHangindent} % Backup for \hangindent

% Suppresses underfull hbox warnings, frequent and meaningless when flushleft env is used.
\hbadness=10000

%Removed paragraph tags, added flushleft.
%Using \sloppy or \emergencystretch does not produce the desired result
% - there are still big overfull hbox-es.
%\par\indent\ has no effect in combination with either flushleft or FlushLeft.
%Hacks on the net designet to restore indent work with raggedright macro,
%  but not with the env equivalent - flushleft. Same for ragged2e package.
% http://tex.stackexchange.com/questions/185970/raggedright-removes-paragraph-indentation
\newenvironment{syntaxBlock}[1]
{
  \newcommand{\defSort}{#1}%The defined sort, default arg 1 of all \syntax, \syntaxCont
  \setlength{\savedParindent}{\parindent}
  \setlength{\savedHangindent}{\hangindent}
  \setlength{\parindent}{\k@indent}
  \par
  \vspace{\k@StartVspace}
  %When we use minipages, extra vspace created by \begin{flushleft} disappears.
  \begin{minipage}{\columnwidth-\parindent}
  \begin{flushleft}
}
{
  \end{flushleft}
  \end{minipage}% after this minipage, all spaces have to be commented
  \vspace{\k@EndVspace}%
  \setlength{\parindent}{\savedParindent}%
  \setlength{\hangindent}{\savedHangindent}%
}

%Removed grouping and rulebox from init version, added hangindent, hspace.
%#1 = defined sort, #2 = production, #3 = attributes
\newcommand{\syntax}[3][\defSort]{
  \setlength{\hangindent}
    {\widthof{%
      \syntaxKeyword$\syntaxLHS{#1} \mathrel{::=} \ $%
      \hspace{\k@syntaxHangindent}%for an extra indent after ::=
    }}
  %
  \syntaxKeyword$\syntaxLHS{#1} \mathrel{::=} #2$ \ifthenelse{\isempty{#3}}{}{[#3]}%
  \k@markPosition%
}

% The amount of indention for continued rules.
\newlength{\syntaxlength}

%Additional production in the same big syntax definition started with \syntax
%#1 = defined sort, #2 = production, #3 = attributes
\newcommand{\syntaxCont}[3][\defSort]{
  \par
  $\setlength{\syntaxlength}{\widthof{$\mathrel{::=}$}}%
  \setlength{\syntaxlength}{.5\syntaxlength}%
  \addtolength{\syntaxlength}{\widthof{\syntaxKeyword$\syntaxLHS{#1}$}}%
  \hspace{\syntaxlength}%
  \;\;\!\mid\;#2$ \ifthenelse{\isempty{#3}}{}{[#3]}%
  \k@markPosition%
}

\newcommand{\syntaxLHS}[1]{\nonTerminal{\sortName{#1}}}%the defined sort

% Non-terminals.
\newcommand{\nonTerminal}[1]{#1}%always wraps a \sort
\newcommand{\sort}[1]{\sortName{#1} \ }

%Maroon - good for contrast with BueViolet var
% surprisingly looks better than DarkMagenta when vars are bold black.
%Indigo - too dark, tiring
%BlueViolet - too light, catches attention
%DarkMagenta - between Indigo and BlueViolet, closest to IDE settings, yet seems more tiring than BlueViolet.
%Ideally we would like attention to be on variables, not sorts.
%DimGray - good for emphasizing vars as bold, looks hard to see.
%Black - not distinct enough. Other syntactic kinds are also black italic.

%Brown - lighter version of Maroon. Looks surprisingly easier on the eyes.
%RawSienna - lighter than Brown, too shit-like.
%orange - too bright and hard to read
%BrickRed - slightly lighter than brown, already too bright.
% Brown is the best option so far, when combined with bold black var names.
% Does not distract attention from var names, looks different enough from terms and vars,
% and it's easy to concentrate on sorts when needed.
\colorlet{sortColor}{DimGray}

%Display of a sort in any context - syntax or rule.
\newcommand{\sortName}[1]{\text{\color{sortColor} \itshape #1}}

% Terminals.
%mathord - binds to parentheses, separates from operators
%mathrel - separates from parentheses on the outside, poorly separates from op
%mathpunct - like mathrel, but with less separation from parentheses on outside, looks better.
%disabling allowbreak in terminal produces no overfull in fullpage mode, slightly better results.
%Could be added if needed.
%mathpunct doesn't allign well in syntax definitions
%originally was mathrel
\newcommand{\terminal}[1]{\ensuremath{\mathrel{\text{\ttfamily #1}} \ktspace}}

\newcommand{\userListSep}[1]
  {\kcommaspacebefore \ensuremath{\mathord{\text{\ttfamily #1}} \kcommaspace \allowbreak}}

\newcommand{\klabel}[1]{#1}

%Additional space between 2 terminals. Produced by backend.
\newcommand{\kttspace}{\ }

%Space after a terminal, thin space
\newcommand{\ktspace}{\,}%\,

%space before \kra
\newcommand{\kraspacebefore}{\ }

%space before \kcomma - a negative thin space
\newcommand{\kcommaspacebefore}{\hspace{-0.1em}}

%space before \kcomma - a negative thin space
\newcommand{\kbrspacebefore}{\hspace{-0.1em}}

%space after \kOpenBr
\newcommand{\kbrspace}{\,}

%space after \kcomma
\newcommand{\kcommaspace}{\ }

%space after \k variable
\newcommand{\kvarspace}{\,}

%space after reduce
\newcommand{\kreducespace}{\kvarspace}

% Tags
\newcommand{\kattribute}[1]{{\color{AttribColor}#1}}

% Cells %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\ifk@poster
%%% Tooltips.

% Following a how-to guide for Adobe InDesign, we create tooltips for items by
% overlaying them with a transparent button.
%
% For documentation on the JavaScript objects, see the JavaScript for Acrobat
% API Reference at http://www.adobe.com/devnet/acrobat/javascript.html
%
% For documentation on the PDF code, see the PDF reference manual at
% http://www.adobe.com/devnet/pdf/pdf_reference.html

% These definitions will hold the payload.  They have to be global because
% hyperref definitions vanish when the document starts(?).
\def\k@tooltipText{}%
\edef\k@tooltipString{}%

% The "user name" of fields is the user visible name of this entity.  For
% (non-readonly) buttons, it shows up as tooltip when the mouse hovers over it.
% Unfortunately, the hyperref package does not allow specifying the user name;
% thus, by means of a small hack, we push in some raw PDF code when hyperref
% creates a PushButton object.  The raw PDF code is appended to the "flags"
% field \Fld@flags.  See the button creation macro "\PDFForm@Push" in the
% hpdftex.def driver.
%
% For the definition of the user name property of fields, see section 12.7.3.1
% in the PDF specification.
\let\k@hyPushButtonFlags=\HyField@FlagsPushButton
\gdef\HyField@FlagsPushButton{%
  % Execute the original macro
  \k@hyPushButtonFlags%
  % Save the current flags and add the user visible name via /TU ("text user"?).
  \let\k@currentFlags=\Fld@flags%
  \pdfstringdef\k@tooltipString{\k@tooltipText}%
  \edef\Fld@flags{/TU (\k@tooltipString)\k@currentFlags}%
  \edef\Fld@bordercolor{\space}%
}

\newcounter{k@tooltipCounter}

\newcommand{\k@withTooltip}[2]{%
  % #1 is the target / box, #2 is the tooltip
  \def\k@tooltipText{#2}
  \hbox{\PushButton[name=tooltip\the\c@k@tooltipCounter,
              borderwidth=0,
              % The focus handler executes before the click happens, so the
              % button is set to "not interact" just before it would change
              % its visual appearance.
              onfocus={ var t = this.getField("tooltip\the\c@k@tooltipCounter");
                       t.highlight = highlight.n; }
             ]{#1}}%
  \addtocounter{k@tooltipCounter}{1}%
}

\else %ifk@poster
  \newcommand{\k@withTooltip}[2]{#1}
\fi

%%% Rewrite.

\newsavebox{\k@reduceBox}
\newlength{\k@reduceLen}

%Arguments: #1: "lonely" = the only content of the parent object, empty otherwise.
% #2 = LHS, #3 = RHS
\newcommand{\reduce}[3][]{%
  \savebox{\k@reduceBox}{\reduceImpl{#1}{#2}{#3}}%
  \setlength{\k@reduceLen}{\widthof{\usebox{\k@reduceBox}}}%
  \allowbreak% Disabling this allowbreak may lead to ugly rendering in combination with rewrite indenting
  \ifthenelse{\equal{#1}{lonely}
              \OR \k@reduceLen < \dimexpr\k@reduceIndentThreshold\relax}
    {}
    %without hbox some extra indent sometimes happens
    {\hbox{\hspace*{\k@nonLonelyReduceIndent}}}% clean option
    %{\hbox{\textcolor{red}{\rule{\k@nonLonelyReduceIndent}{1ex}}}}% debug option
  \usebox{\k@reduceBox}%
  \allowbreak%
}

\newlength{\lhsInnerYSep}
\newlength{\rhsInnerYSep}

%It would be ideal to have a vspace after indented rewrite, but I don't know how to do this.

\newcommand{\reduceImpl}[3]{%
  \hbox{%
  \computeMaxReduceLen{#1}%
  \setlength{\lhsInnerYSep}{\dimexpr\k@rewriteLHSInnerYSep\relax}%
  \setlength{\rhsInnerYSep}{\dimexpr\k@rewriteRHSInnerYSep\relax}%
  \begin{tikzpicture}[baseline=(top.south),
                      inner xsep=0pt,
                      inner ysep=.3333ex,
                      minimum width=2em,
                      align=left]%align changes the style a little
    \path
    %\dimexpr\k@rewriteLHSInnerYSep\relax
    %1ex
    node (top) [inner ysep=\lhsInnerYSep]{%
      \reduceSide{#2}%
    }
    (top.south)
    node (bottom) [anchor=north, inner ysep=\rhsInnerYSep] {%
      \reduceSide{#3}%
    };
    %%% Draw the horizontal line:
    % Line with chevron.
    %\path[draw,thin,solid] let \p1 = (current bounding box.west),
    %                           \p2 = (current bounding box.east),
    %                           \p3 = (top.south)
    %                       in (top.south) ++(0,-1.5pt) -- ++(-2pt,1.5pt) -- (\x1,\y3)
    %                          (top.south) ++(0,-1.5pt) -- ++(2pt,1.5pt)  -- (\x2,\y3);
    %%% Other options:
    % Solid line.
    \path[draw,thin,solid] let \p1 = (current bounding box.west),
                               \p2 = (current bounding box.east),
                               \p3 = (top.south)
                           in (\x1,\y3) -- (\x2,\y3);
    % Solid arrow (augmenting the solid line).
    \path[fill] (top.south) ++(2pt,0) -- ++(-4pt,0) -- ++(2pt,-1.5pt) -- cycle;
  \end{tikzpicture}%
  \hspace{\kReduceSpaceAfter}%
  }%
}

\newlength{\kReduceSpaceAfter}
\setlength{\kReduceSpaceAfter}{0.1em}

\newlength{\kMaxReduceLen}

%Computes \kMaxReduceLen
\newcommand{\computeMaxReduceLen}[1]{%
  \setlength{\kMaxReduceLen}{\columnwidth-\k@ruleHangindentAux}%
  \addtolength{\kMaxReduceLen}{-\kReduceSpaceAfter}%
  %lonely rewrites occupy the whole hspace, non-lonely could be indented.
  \ifthenelse{\equal{#1}{lonely}}
    {}
    {\addtolength{\kMaxReduceLen}{-\k@nonLonelyReduceIndent}}%
  % To avoid shrinking of top-level cells inside reduce
  % The borders around a reduce are cell wals of maximal height
  \setlength{\k@ruleHangindentAux}{0pt}%
}

\newlength{\k@termlen}%temp value used by line breaking alg

%LHS or RHS of a \reduce
\newcommand{\reduceSide}[1]{%
  \setlength{\k@termlen}{\widthof{$#1$}}%
  \ifthenelse{\k@termlen > \kMaxReduceLen}
    {%
     % otherwise an extra newline may be created at the beginning of a rule
     \addtolength{\kMaxReduceLen}{-0.5pt}%
     %
     \begin{boxedminipage}{\kMaxReduceLen}%
      \begin{center}$#1$\end{center}%
     \end{boxedminipage}%
    }%
    {$#1$}%
  %\mathstrut will add a vspace in some cases, will look better on overal
  \ifthenelse{\equal{\k@rewriteCompactness}{normal}}{\mathstrut}{}%
}

%%% K Term contents.

%Mathop produces the largest spaces around
\newcommand{\kra}{\kraspacebefore \allowbreak \mathop{\curvearrowright} \ktspace }
\newcommand{\kcomma}{\kcommaspacebefore \ensuremath{\mathpunct{\textbf{,}} \kcommaspace \allowbreak}}%mathpunct

%Open and closed parens as part of some syntax
\newcommand{\kOpenBr}{\kbrspacebefore \mathtt{(} \kbrspace \allowbreak}
\newcommand{\kClosedBr}{\mathtt{)} \ktspace \allowbreak}

%Open and closed parens in a label-application expression (AST-based term)
\newcommand{\kOpenLabelBr}{( \allowbreak}
\newcommand{\kClosedLabelBr}{) \ktspace \allowbreak}

\newcommand{\kvalue}[1]{{\color{red}#1}}

\newcommand{\constant}[2][none]{%
  \k@withTooltip{\text{\sffamily #2} \kvarspace}{\syntaxKeyword #1 ::= "#2"}%
}

\colorlet{varColor}{Black}%Indigo (too dark, eye tiring), BlueViolet (good when sort is Maroon)

%Limitation: greek letters are not bolded.
\newcommand{\varName}[1]{\ensuremath{
  %{\color{varColor}\it #1} %V1
  {\color{varColor}\mathbf{#1}} %V2
}}

\newcommand{\varSort}[1]{\sortName{{:}#1}}

%Arguments: #1 = Sort, #2 = name, #3 = either user or {}.
%Sort is only rendered if arg3=user
\newcommand{\variable}[3][none]{%
  \k@withTooltip{%
    \text{\ensuremath{%
      \varName{#2}%
      \ifthenelse{\equal{#3}{user}}%
        {\varSort{#1}}%
        {}%
      \kvarspace%
    }}%
  }%
  {Variable #2:#1}%
}

%original: black!60
\colorlet{dotSortColor}{sortColor}

\newcommand{\dotCt}[1]{%
  \ensuremath{%
    {\raise.3ex\hbox{$\kdot$}}_{\color{dotSortColor}\scriptstyle\it \!#1}}%
  \kvarspace%
}

\newcommand{\mdot}{\cdot}

%Anonymous variable
\newcommand{\mAnyVar}[2]{%
  \mbox{\textbf{---}}%
  \ifthenelse{\equal{#2}{user}}{\varSort{#1}}{}%
  \kvarspace%
}

%Old builtin tag: +_{\scriptstyle\it Float}
%Arguments: #1 = operator, above: +, #2 = sort, above: Float
\newcommand{\kBuiltinOp}[2]{%
  \ensuremath{%
    \allowbreak \mathrel{#1_{\scriptstyle\it #2}}%
  }%
  \ktspace%
}

%Parens () that are K separators, not part of any defined syntax.
\newcommand{\kbrackets}[1]{\ensuremath{
  \setlength{\k@angleHeight}{\heightof{\vphantom{$#1$}}}%
  \pmb{%
    \color{AttribColor}
    \left(%
    \rule{0in}{\k@angleHeight}% a strut, \strut command gives errors
    \right.%
  }%
  \ktspace%
  #1%
  \pmb{%
    \color{AttribColor}
    \left.%
    \rule{0in}{\k@angleHeight}%
    \right)%
    \ktspace%
  }%
}}

%%% Mathematical notation.

\newcommand{\mallLarge}{\mall}

\newcommand{\mall}[3]{ \mcell{#1}{#2}{}{#3}{} }

\newcommand{\mprefix}[3]{ \mcell{#1}{#2}{}{#3}{\ \ellipses} }

\newcommand{\msuffix}[3]{ \mcell{#1}{#2}{\ellipses \ }{#3}{} }

\newcommand{\mmiddle}[3]{ \mcell{#1}{#2}{\ellipses \ }{#3}{\ \ellipses} }

% Triple dot
\newcommand{\ellipses}{{\mathrel{\cdot\!\!\cdot\!\!\cdot}}}


\colorlet{mcellColor}{White}
\colorlet{mcellBodyColor}{White}
\colorlet{mcellBracketDefaultColor}{Maroon}
\colorlet{mcellBracketColor}{White}

\newlength{\angleMaxHeight}
\setlength{\angleMaxHeight}{40pt}%manually determined

\newsavebox{\k@anglesBodyBox}
\newlength{\k@angleHeight}
\newlength{\k@angleTotalHeight}

% Surrounds the given argument with bold angular brackets, for better display of angle colors.
% The argument itself is rendered in notmal text.
% Source: http://tex.stackexchange.com/questions/47979/how-do-i-apply-both-mathbf-and-left-to-a-langle
\newcommand{\boldangles}[1]{%
  %Height must be captured for performance optimizations.
  %If we use the unchanged solution from the link above, it is too slow.
  \savebox{\k@anglesBodyBox}{{$#1$}}
  \setlength{\k@angleHeight}{\heightof{\usebox{\k@anglesBodyBox}}}%
  \setlength{\k@angleTotalHeight}{\totalheightof{\usebox{\k@anglesBodyBox}}}%
  \pmb{%
    \left\langle%
    \rule{0in}{\k@angleHeight}% a strut, \strut command gives errors
    \right.%
  }%
  \ifthenelse{\k@angleHeight > \angleMaxHeight}
    {%Draw vertical rules along the angles if the content is higher that highest possible angles.
      \blackrule{0.5pt}%
      \whiterule{2.75pt}%3pt gives spurious overfull in K-Java config
      \usebox{\k@anglesBodyBox}%
      \whiterule{2.75pt}%
      \blackrule{0.5pt}%
    }
    {\usebox{\k@anglesBodyBox}}%
  \pmb{%
    \left.%
    \rule{0in}{\k@angleHeight}%
    \right\rangle%
  }%
}

\newcommand{\blackrule}[1]
  {\rule[\k@angleHeight-\k@angleTotalHeight]{#1}{\k@angleTotalHeight}}
\newcommand{\whiterule}[1]{\rule{#1}{0pt}}

\newsavebox{\kCellBox}
\newlength{\kCellLen}

\newboolean{cellWithWrap}

%Arguments:
% #1 = color (default gray), #2 = cell name,
% #3 = prefix, #4 = content, #5 = suffix.
\newcommand{\mcell}[5]{%
  %Commented endl is very important here.
  % setup
  \ifthenelse{\isempty{#1}}
    {\colorlet{mcellColor}{white!50!black}}
    {\colorlet{mcellColor}{#1!50!black}}%
  \ifthenelse{\boolean{k@coloredCellBrackets}}
    {\colorlet{mcellBracketColor}{mcellColor}}
    {\colorlet{mcellBracketColor}{mcellBracketDefaultColor}}%
  \ifthenelse{\boolean{k@coloredCellBody}}
    {\colorlet{mcellBodyColor}{mcellColor}}
    {\colorlet{mcellBodyColor}{Black}}%
  % rendering
  {% to confine altered vars to this scope
    \computeAllowedLenghts{#2}{#3}{#5}%
    \setboolean{cellWithWrap}{false}%
    \saveCellBox{#2}{#3}{#4}{#5}{\kCellBox}%
    \setlength{\kCellLen}{\widthof{\usebox{\kCellBox}}}%
    \ifthenelse{\kCellLen > \kMaxCellLen}
      {%
        \setboolean{cellWithWrap}{true}%
        \saveCellBoxWithWrap{#2}{#3}{#4}{#5}%
        \computeAllowedLenghtsPrecisely{#2}{#3}{#5}%
        \ifthenelse{\kMaxCellBodyLen > \kOldMaxCellBodyLen}
          {
            \saveCellBoxWithWrap{#2}{#3}{#4}{#5}%
            \computeAllowedLenghtsPrecisely{#2}{#3}{#5}%
            \ifthenelse{\kMaxCellBodyLen > \kOldMaxCellBodyLen}
              {\saveCellBoxWithWrap{#2}{#3}{#4}{#5}}
              {}%
          }
          {}%
      }
      {}%
    \usebox{\kCellBox}%
    \ifthenelse{\kCellLen > \kMaxCellMinusSepLen}
      {\global\def\needAllowbreak{true}}
      {\global\def\needAllowbreak{false}}%
  }%
  %\cellSep may add some spaces at the end of the cell
  %This is the most elegant solution, doesn't eat any space
  \ifthenelse{\equal{\needAllowbreak}{true}}
    {\allowbreak}
    {}%
}

% #1 = name, #2 = prefix, #3 = content, #4 = suffix, #5 = box name
\newcommand{\saveCellBox}[5]{%
  \savebox{#5}{{%
    $
    \color{mcellBracketColor}
    \boldangles{{
      #2 {\color{mcellBodyColor} #3} #4
    }}
    _{\text{\footnotesize\sf #1}}
    $%
  }}%
}

% #1 = name, #2 = prefix, #3 = content, #4 = suffix
\newcommand{\saveCellBoxWithWrap}[4]{%
  \savebox{\kCellBox}{{%
    $
    \color{mcellBracketColor}
    \boldangles{{
      #2
      \begin{boxedminipage}{\kMaxCellBodyLen}%
        \raggedright{%
          $\color{mcellBodyColor} #3$%
        }%
      \end{boxedminipage}%
      #4
    }}
    _{\text{\footnotesize\sf #1}}
    $%
  }}%
}

\newlength{\k@cellBorders}%the maximal (supposed) width of some cell borders, to be substracted from columnwidth when implementing a cell with line breaking.

\newlength{\kMaxCellLen}
\newlength{\kMaxCellBodyLen}
\newlength{\kCellSepLen}
\newlength{\kMaxCellMinusSepLen}
\newlength{\kCellHeight}
\newsavebox{\kPhantomBox}

%Computes \kMaxCellLen, \kMaxCellBodyLen
% #1 = name of innermost cell, #2 = prefix, #3 = suffix
\newcommand{\computeAllowedLenghts}[3]{%
  \setlength{\kMaxCellLen}{\columnwidth-\k@ruleHangindentAux}%
  \setlength{\kCellSepLen}{\widthof{\cellSep}}%
  \setlength{\kMaxCellMinusSepLen}{\kMaxCellLen-\kCellSepLen}%
  %
  % To avoid shrinking of nested cells
  % The borders around a reduce are cell wals of maximal height
  \setlength{\k@ruleHangindentAux}{0pt}%
  %
  % We assume that cell has highest possible borders
  \saveCellBox{#1}{#2}{\rule{0in}{5\baselineskip}}{#3}{\kPhantomBox}%
  %
  \setlength{\k@cellBorders}{\widthof{\usebox{\kPhantomBox}}}%
  \setlength{\kMaxCellBodyLen}{\kMaxCellLen-\k@cellBorders}%
}

\newlength{\kOldMaxCellBodyLen}

%compute again, this time adjusting braces size more precisely
\newcommand{\computeAllowedLenghtsPrecisely}[3]{%
  % We assume the cell borders with height equal to the previous rendering
  \setlength{\kCellHeight}{\heightof{\usebox{\kCellBox}}}%
  \saveCellBox{#1}{#2}{\rule{0in}{\kCellHeight}}{#3}{\kPhantomBox}%
  %
  \setlength{\k@cellBorders}{\widthof{\usebox{\kPhantomBox}}}%
  \setlength{\kOldMaxCellBodyLen}{\kMaxCellBodyLen}%
  \setlength{\kMaxCellBodyLen}{\kMaxCellLen-\k@cellBorders}%
}

%Cell separator, ensures proper spacing and line breaking
%Originally was \mathrel{}. That one produces an extra space when line breaking
\newcommand{\cellSep}{\ \ \allowbreak}

%%% Manual line breaking.

%A block of cells containing manual line breaks
\newcommand{\manualBRBlock}[1]{%
  \ifthenelse{\boolean{cellWithWrap}}
    {%
      \begin{array}{@{}l@{}}%
        \begin{minipage}{\kMaxCellBodyLen}%
          \raggedright%
          $#1$
        \end{minipage}%
      \end{array}%
    }
    {\begin{array}{@{}l@{}}#1\end{array}}%
}

%A manual line break
\newcommand{\cellBR}{%
  \ifthenelse{\boolean{cellWithWrap}}
  {%
    $%
    \end{minipage}%end of the previous block
    \\%
    \begin{minipage}{\kMaxCellBodyLen}%begin of the new block
    \raggedright%
    $%
  }
  {\\}%
}


%%% Bubble notation.

\newcommand{\ball}[3]{\kcell{#1}{#2}{#3}{convex}{convex}}
\newcommand{\ballLarge}{\ball}

\newcommand{\bprefix}[3]{\kcell{#1}{#2}{#3}{convex}{none}}
\newcommand{\bsuffix}[3]{\kcell{#1}{#2}{#3}{none}{convex}}
\newcommand{\bmiddle}[3]{\kcell{#1}{#2}{#3}{none}{none}}
\newcommand{\bdot}{{\scriptscriptstyle\bullet}}
\newcommand{\bAnyVar}[2]{%
  \k@withTooltip{%
    \mbox{\textbf{---}}%
    \ifthenelse{\equal{#2}{user}}{\varSort{#1}}{}%
  }{Variable \_:#1}%
}

\tikzset{
  cell/.style={
    line width=1pt,
    draw=#1!50!black,
    shade,
    shading=axis,
    top color=#1!20,
    bottom color=#1!20!white!90!black,
  },
  body/.style={
    rounded rectangle,
    rounded rectangle arc length=180,
    minimum width=\ifk@tight 1em \else 3em \fi,
    minimum height=4ex,
    inner ysep=.3333em,
    inner xsep=.3333em
  },
  label/.style={
    rectangle,
    inner xsep=.5ex,
    inner ysep=.5ex,
    text depth=.15em,
%    font=\sffamily\footnotesize
  },
}


%%% The main bubble drawing method \kcell.

\pgfdeclarelayer{background}
\pgfsetlayers{background,main}

\newlength{\k@cellContentWidth}
\newlength{\k@cellContentHeight}
\newlength{\k@labelXShift}
\newlength{\k@ruptureStepSize}

% Cell drawing happens roughly as follows:
% 1) The cell content is placed in the image.
% 2) TikZ fits a 'rounded rectangle' node around the content.  This node, which
%    we call 'body' here, remains invisible; its anchors serve as reference points.
% 3) The label is placed on the top left of the cell body.
% 4) The cell outline is drawn and filled on the background layer, that is,
%    behind the already placed cell content.
% 5) Some vertical space is added around the whole drawing.
% #1 = color, #2 = name, #3 = body
% #4 = convex or none, #5 = convex or none
\newcommand{\kcell}[5]{\hbox{%
  \begingroup
  \def\cellColor{#1}%
  \def\cellLabel{\textsf{\footnotesize\strut #2}}% The strut ensures even label height.
  \def\cellContent{$#3$}%
  % Parameters #4 and #5 determine whether the west and east arc are curved
  % or straight ("whole" or "ruptured").

  \begin{tikzpicture}[baseline=(cell content.base)]
    \begin{scope}[inner sep=0pt,outer sep=0pt,anchor=base west]
      % Beside the cell content, also draw an empty node a bit wider than
      % the cell label.  That way, the cell body will always be wide enough
      % for the label.
      \path node (cell content) {\cellContent}
            node                {\phantom{\cellLabel}\hbox to \ifk@tight 1pt \else 2em \fi {}};
    \end{scope}
    % Determine the size of the cell content.
    \def\k@cellContentBBox{\pgfpointdiff{\pgfpointanchor{current bounding box}{south west}}
                                        {\pgfpointanchor{current bounding box}{north east}}}
    \pgfextractx{\k@cellContentWidth}{\k@cellContentBBox}%
    \pgfextracty{\k@cellContentHeight}{\k@cellContentBBox}%

    \begin{pgfonlayer}{background}
      \ifdraft{%
        \path (cell content.center)
              node (cell body) [body,
                                rectangle,
                                anchor=center,
                                text width=\k@cellContentWidth,
                                text height=\k@cellContentHeight] {};
      }{%
        % Let TikZ find the best rounded rectangle around the content.
        \path (cell content.center)
              node (cell body) [body,
                                anchor=center,
                                text width=\k@cellContentWidth,
                                text height=\k@cellContentHeight,
rectangle,rectangle
%                                rounded rectangle west arc=#4,
%                                rounded rectangle east arc=#5
] {};
      }
    \end{pgfonlayer}

    % Place the cell label relative to the rounded rectangle.  If the left side
    % is straight, shift the label a little to the right to avoid an ugly
    % long vertical left side.
    \ifthenelse{\equal{#4}{convex}}{%
      \setlength{\k@labelXShift}{0pt}%
    }{
      \setlength{\k@labelXShift}{1ex}
    }%

    \path (cell body.north west)
          ++(\k@labelXShift,.6ex)
          node (cell label) [label,anchor=base west] {\cellLabel};

    % Finally, draw the background of the cell behind the content.
    \begin{pgfonlayer}{background}
      % Decide how to draw the cell's west and east side.
      \ifthenelse{\equal{#4}{convex}}{%
        \def\cellWestArc{ arc (90:270:\n4 and \n3) -- (cell body.south west) }%
      }{%
        \ifdraft{%
          \def\cellWestArc{ |- (cell body.south west) }
        }{%
          % This yields a rounded zig zag pattern (starting outward).
          \def\cellWestArc{ { [rounded corners=.25ex]
                              \foreach \signPrefix in {-,0,-,0,-,0,-,0} {%
                                -- ++(\signPrefix{}.75\k@ruptureStepSize,-\k@ruptureStepSize)}
                            }
                          }%
        }%
      }%
      \ifthenelse{\equal{#5}{convex}}{%
        \def\cellEastArc{ arc (-90:90:\n4 and \n3) }%
      }{%
        \ifdraft{%
          \def\cellEastArc{ -- (cell body.north east) }
        }{%
          \def\cellEastArc{ { [rounded corners=.25ex]
                              \foreach \signPrefix in {0,-,0,-,0,-,0,-} {%
                                -- ++(\signPrefix{}.75\k@ruptureStepSize,\k@ruptureStepSize)}
                            }
                          }%
        }%
      }%

      % Draw the cell outline
      \path[cell=\cellColor]
                    % Compute half of the body's height.  The value is the
                    % radius for the arced sides; it also determines the size
                    % of the zig zag pattern of ruptured sides.
                    let \p1 = (cell body.north east),
                        \p2 = (cell body.center),
                        \n3 = {\y1 - \y2},
                        \n4 = {\ifk@tight 1ex + \n3 / 5 \else \n3 \fi}
                    in
                    \pgfextra{%
                      \setlength{\k@ruptureStepSize}{\n3}%
                      \setlength{\k@ruptureStepSize}{.25\k@ruptureStepSize}%
                     }%

                    % Draw counter-clock-wise, starting from the
                    % lower right corner.
                    (cell body.south east)

                    % Right
                    \cellEastArc

                    % Top
                    { [rounded corners=.2em]
                                  -| (cell label.north east)
                                  -- (cell label.north west)
                                  |- (cell body.north west)
                    }
                    % A little offset to the left for a more pleasant look
                    -- ++(-.2em,0pt)

                    % Left
                    \cellWestArc

                    % Bottom (just close the path)
                    -- cycle;
    \end{pgfonlayer}

    % Add extra space above and below the cell.
    \path[use as bounding box] (current bounding box.south west) ++(0,-.3333em)
                               rectangle (current bounding box.north east) ++(0,.3333em);
  \end{tikzpicture}%
  \endgroup
}}

% Configuration %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\kconfig}[1]{%
  \ksentence[]{configuration}{}{#1}{}{}{}%
}

% Rules and Equations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Context.
\newcommand{\kcontext}[5][]{
  \ksentence{context}{#1}{#2}{#3}{#4}{#5}
}

\newcommand{\khole}{\Box}

%Arguments: name, body, side condition, postconditions (for ML), attributes, {}
\newcommand{\krule}[6][]{%
\ksentence[#6]{rule}{#1}{#2}{#3}{#4}{#5}
}

\newlength{\k@ruleHangindentAux}

\ifk@poster
%%% Poster mode

  %Arguments: {}, rule, name, body, preconditions, postconditions (for ML), attributes
  \newcommand{\ksentence}[7][]{%
  \wrapRules{%
    \rulebox{%
      \k@ruleLabel{#3}{#2}\hspace{1em}%
      \ifthenelse{\isempty{#1}}{
        $#4$%
      }{%
        $\left(#4\right)$%
      }%
    }%
    \ifthenelse{\isempty{#5}}{}{%
      \hspace{2em}%has no effect
      \keyword{requires} \ensuremath{#5}%
      \k@markPosition%
    }%
    \ifthenelse{\isempty{#6}}{}{%
      \hspace{2em} \keyword{ensures} \ensuremath{#6}%
      \k@markPosition%
    }%
    \k@markPosition%
    \ifthenelse{\isempty{#7}}{}{%
      \ruleAttributes{#7}%
    }%
  }%
  }

  \newcommand{\wrapRules}[1]{%
    \par\indent#1\par\ \par%
  }

  \newcommand{\rulebox}[1]{\hbox{#1}}

  \newcommand{\ruleAttributes}[1]{\hfill[#1]}

  %Arguments: label, keyword
  \newcommand{\k@ruleLabel}[2]{%
    \ifthenelse
      {\isempty{#1}}%
      {\keyword{#2}}%
      {\k@withTooltip{\keyword{#2}}{Rule Label: #1}}%
  }

  \newcommand{\when}[1]{%
    \hspace{2em} when \ensuremath{#1}%
    \k@markPosition%
  }

  \newcommand{\myskip}{\bigskip}

\else
%%% Paged (non-poster) mode

  %Arguments: {}, rule, name, body, preconditions, postconditions (for ML), attributes
  \newcommand{\ksentence}[7][]{{
  \setlength{\savedParindent}{\parindent}
  \setlength{\savedHangindent}{\hangindent}
  \setlength{\parindent}{\k@indent}
  \setlength{\k@ruleHangindentAux}{\k@ruleHangindent}
  %
  %Framebox-es are for debug purposes
  %Here we make sure they do not produce overfull warnings.
  \setlength{\fboxsep}{0pt}% debug: 1pt
  \setlength{\fboxrule}{0pt}% debug: 0.4 pt
  %
  \par
  \vspace{\k@StartVspace}
  \begin{minipage}{\columnwidth-\parindent}%
    \begin{minipage}{\columnwidth}%
    %setting hangindent after raggedright will not work
    \setlength{\hangindent}{\k@ruleHangindentAux}%
    \raggedright{%
      \k@ruleLabel{#3}{#2}%
      \setlength{\parindent}{\k@ruleHangindentAux}%
      \ifthenelse{\isempty{#1}}{%always the case
        $#4$%
      }{%
        $\left(#4\right)$%
      }%
    }
    \end{minipage}%
    \ifthenelse{\isempty{#5}}{}{%
      \setlength{\hangindent}{\k@ruleHangindentAux}
      \raggedright{%\begin{flushleft} produces extra vspace
        \par
        \keyword{requires} \ensuremath{#5}%
        \k@markPosition%
      }%
    }%
    \ifthenelse{\isempty{#6}}{}{%
      \setlength{\hangindent}{\k@ruleHangindentAux}
      \raggedright{
        \par
        \keyword{ensures} \ensuremath{#6}%
        \k@markPosition%
      }%
    }%
    \k@markPosition%
    \ifthenelse{\isempty{#7}}{}{%
      \ruleAttributes{#7}%
    }%
  \end{minipage}
  \setlength{\parindent}{\savedParindent}
  \setlength{\hangindent}{\savedHangindent}
  \vspace{\k@EndVspace}
  }}

  \newlength{\attribIndent}%Indentation of attributes
  \setlength{\attribIndent}{4em}

  \newcommand{\ruleAttributes}[1]{\par{}\hspace{\attribIndent} [#1]}

  %Arguments: label, keyword
  \newcommand{\k@ruleLabel}[2]{%
    \ifthenelse
      {\equal{#1}{\textbackslash !}}%
      {\keyword{#2}}%
      {\k@withTooltip{\keyword{#2} \ruleName{#1}}{Rule Label: #1}}\\%
  % \global\def\ignoreThisLabel{#1}%
  }
  \newcommand{\when}[1]{\par{}\hspace{2em} when \ensuremath{#1}}

  \newcommand{\myskip}{\smallskip}
\fi


\makeatother

% K listing format for package {listings}
%=================================================================

\usepackage{listings}


\lstnewenvironment{asciik}{
       \lstset{
               language=k,
               basicstyle=\small,
               tabsize=2,
               %frame=tb,
               columns=flexible,
               mathescape=false,
         upquote=true,
% 				literate=
% 	   			{"}{\textquotedbl}1
       }
}{}
\lstdefinelanguage{k}{
    upquote=true,
       morekeywords={kompile, kast, krun, require, HOLE, configuration, module, end, imports, rule, macro, op, ops, syntax, sort, sorts, subsort, subsorts, context, HOLE, hybrid, strict, seqstrict, binder, color, latex, kvar, structural, transition, superheat, supercool, search, rewrite, prec, gather, stream, multiplicity, when},
        emph={[3]Map, Set, Bag, List, K, KLabel, KResult, KProper, CellLabel, SetItem, BagItem, ListItem, MapItem, Int, Bool, String, Id},
       emphstyle={[3]\textit},
       literate=
       {LT}{$<$}3
       {LEQ}{$<=$}4
%       {.K}{$\kdot{\it K}$}2
%       {.List}{$\kdot{\it List}$}4
       {PROMPT}{\$}1
       {...<}{${\ellipses}\langle$}2
       {>}{$\rangle$}1
       {>...}{$\rangle{\ellipses}$}2
       {+Int}{$+{\rm\scriptstyle Int}$}4
       {*Int}{$*{\rm\scriptstyle Int}$}4
       {/Int}{$/{\rm\scriptstyle Int}$}4
       {LeqInt}{${<}{=}{\rm\scriptstyle Int}$}9
       {!=Int}{${!}{=}{\rm\scriptstyle Int}$}5
       {==Bool}{${=}{=}{\rm\scriptstyle Bool}$}7
       {=/=Bool}{${=}{/}{=}{\rm\scriptstyle Bool}$}9
       {notBool}{${\tt not}{\rm\scriptstyle Bool}$}5
       {<}{$\langle$}1
       {_}{$\_$}1 {~}{$\_$}1
       {=>}{$\;=\!>$}5
       {->}{{$->$}}3
       {~>}{{$\sim\!\!>$}}3
       {|->}{$\;|-\!\!>$}5
}
\newcommand{\ka}[1]{\mbox{\lstinline[language=k]{#1}}}


% Macros unused by Latex backend (non-exclusive list)
%=================================================================

\newcommand{\syntaxContL}[3]{{\small%\par\indent%
$\mid\;{#2}$ \ifthenelse{\isempty{#3}}{}{[#3]\;}%
}}

% Tags.
\newcommand{\kassoc}{assoc}
\newcommand{\kcomm}{comm}
\newcommand{\khybrid}{\kattribute{hybrid}}
\newcommand{\kid}[1]{id: {#1}}
\newcommand{\kditto}{ditto}
\newcommand{\karity}[1]{\kattribute{arity(#1)}}
\newcommand{\kstrict}[2]{{%
  \kattribute{strict}%
  \ifx&#1&%
  \else%
    (#1)%
  \fi%
  \ifx&#2&%
  \else%
    in (#2)%
  \fi%
}}

\newcommand{\kseqstrict}[2]{{%
  \kattribute{seqstrict}%
  \ifx&#1&%
  \else%
    (#1)%
  \fi%
  \ifx&#2&%
  \else%
    in (#2)%
  \fi%
}}

% Configuration
\newcommand{\kconfigb}[1]{\begin{kblock}\kconfig{#1}\end{kblock}}

%%% Rewrite.

\newcommand{\reduceTop}[2]{{#1}\Rightarrow{#2}}
\newcommand{\reduceTopS}[2]{{#1}\rightharpoonup{#2}}

\newcommand{\reduceS}[2]{%
  \hbox{%
  \begin{tikzpicture}[baseline=(top.base),
                      inner xsep=0pt,
                      inner ysep=.3333ex,
                      minimum width=2em]
    \path node (top) {$#1$\strut}
          (top.south)
          node (bottom) [anchor=north] {$#2$\strut};
    \path[draw,thin,densely dashed] let \p1 = (current bounding box.west),
                                        \p2 = (current bounding box.east),
                                        \p3 = (top.south)
                                    in (\x1,\y3) -- (\x2,\y3);
  \end{tikzpicture}%
  }
}

%%% K Term contents.
\newcommand{\displayGreek}[1]{%
  \text{\Large\ensuremath{\displaystyle #1}}%
}

\newcommand{\prefixOp}{\userListSep}

% Rules and Equations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\kcontextb}[4]{\begin{kblock}\kcontext{#1}{#2}{#3}{#4}\end{kblock}}

%%% Equations and structural rules.

\newcommand{\mequation}[3]{%
  \wrapRules{%
  \rulebox{%
    \k@ruleLabel{#1}{macro}\hspace{1em}$#2 = #3$%
  }%
  \k@markPosition%
  }%
}

\newcommand{\cmequation}[4]{%
  \wrapRules{%
  \rulebox{%
    \k@ruleLabel{#1}{macro}\hspace{1em}$#2 = #3$%
    \when{#4}%
  }%
  \k@markPosition%
  }%
}

\newcommand{\kruleb}[4]{\begin{kblock}\krule[#1]{#2}{#3}{#4}\end{kblock}}

