// Copyright (c) 2014-2015 K Team. All Rights Reserved.

package org.kframework.kore.convertors;

import org.junit.Test;
import org.junit.rules.TestName;
import org.kframework.attributes.Source;
import org.kframework.definition.Module;
import org.kframework.kore.K;
import org.kframework.parser.ProductionReference;
import org.kframework.unparser.AddBrackets;
import org.kframework.unparser.KOREToTreeNodes;
import org.kframework.utils.KoreUtils;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Optional;

import static org.junit.Assert.*;

public class TstBackendOnKORE_IT {

    @org.junit.Rule
    public TestName name = new TestName();

    protected File testResource(String baseName) throws URISyntaxException {
        return new File(TstTinyOnKORE_IT.class.getResource(baseName).toURI());
    }

    @Test
    public void kore_imp() throws IOException, URISyntaxException {
        String filename = "/convertor-tests/" + name.getMethodName() + ".k";
        KoreUtils utils = new KoreUtils(filename, "IMP", "IMP-SYNTAX");

        String pgm = "int s, n; n = 20000; while(0<=n) { s = s + n; n = n + -1; }";

        K kResult = utils.stepRewrite(utils.getParsed(pgm, Source.apply("generated by " + getClass().getSimpleName())), Optional.<Integer>empty());

        Module unparsingModule = utils.getUnparsingModule();

        String actual = KOREToTreeNodes.toString(new AddBrackets(unparsingModule).addBrackets((ProductionReference) KOREToTreeNodes.apply(KOREToTreeNodes.up(unparsingModule, kResult), unparsingModule)));

        assertEquals("Execution failed", "<T> <k> .::K </k> <state> s |-> 55 n |-> -1 </state> </T>", actual);
    }

    @Test
    public void kernelc() throws IOException, URISyntaxException {
        String filename = "/convertor-tests/" + name.getMethodName() + ".k";
        KoreUtils utils = new KoreUtils(filename, "KERNELC", "KERNELC-SYNTAX");

        String pgm = "// Copyright (c) 2014 K Team. All Rights Reserved.\n" +
                "#include <stdio.h>\n" +
                "\n" +
                "\n" +
                "int sum(int n)\n" +
                "{\n" +
                "  int s;\n" +
                "\n" +
                "  s = 0;\n" +
                "  while (n > 0) {\n" +
                "    s = s + n;\n" +
                "    n = n - 1;\n" +
                "  }\n" +
                "\n" +
                "  return s;\n" +
                "}\n" +
                "\n" +
                "\n" +
                "int main()\n" +
                "{\n" +
                "  int s;\n" +
                "\n" +
                "  s = sum(10);\n" +
                "  printf(\"The sum for the first 10 natural numbers: %d\\n\", s);\n" +
                "\n" +
                "  return 0;\n" +
                "}\n" +
                "\n";

        K kResult = utils.stepRewrite(utils.getParsed(pgm, Source.apply("generated by " + getClass().getSimpleName())), Optional.<Integer>empty());

        Module unparsingModule = utils.getUnparsingModule();

        String actual = KOREToTreeNodes.toString(new AddBrackets(unparsingModule).addBrackets((ProductionReference) KOREToTreeNodes.apply(KOREToTreeNodes.up(unparsingModule, kResult), unparsingModule)));

        assertEquals("Execution failed", "<T> <k> .::K </k> <state> s |-> 55 n |-> -1 </state> </T>", actual);
    }
}
