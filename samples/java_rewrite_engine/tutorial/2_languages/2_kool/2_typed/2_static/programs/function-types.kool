// This program tests the subtyping of function types

class A {
  void A() {}
}

class B extends A {
  void B() {}
}

class C extends B {
  void C() {}
  class(A) AA(class(A) a) {}
  class(B) AB(class(A) a) {}
  class(C) AC(class(A) a) {}
  class(A) BA(class(A) b) {}
  class(B) BB(class(A) b) {}
  class(C) BC(class(A) b) {}
  class(A) CA(class(C) c) {}
  class(B) CB(class(C) c) {}
  class(C) CC(class(C) c) {}
}

class theMain extends C {
  void theMain() {
  class(C) c = new C();
  class(A)->class(A) aa = c.AA;
  class(A)->class(B) ab = c.AB;
  class(A)->class(C) ac = c.AC;
  class(B)->class(A) ba = c.BA;
  class(B)->class(B) bb = c.BB;
  class(B)->class(C) bc = c.BC;
  class(C)->class(A) ca = c.CA;
  class(C)->class(B) cb = c.CB;
  class(C)->class(C) cc = c.CC;
  ca = ba = aa = ab = ac; // OK: C->A > B->A > A->A > A->B > A->C
  ca = cb = cc = bc = ac; // OK: C->A > C->B > C->C > B->C > A->C
  ba = bb = ab;           // OK: B->A > B->B > A->B
  cb = bb = bc;           // OK: C->B > B->B > B->C
  print("OK\n");
//  ac = bc;  print("Wrong! A->C < B->C\n");
//  bb = cc;  print("Wrong! Incompatible types.\n");
  print("Done\n");
  }
}
