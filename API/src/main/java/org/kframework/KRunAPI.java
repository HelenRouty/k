// Copyright (c) 2016 K Team. All Rights Reserved.
package org.kframework;

import com.google.inject.Provider;
import org.kframework.RewriterResult;
import org.kframework.attributes.Source;
import org.kframework.backend.java.symbolic.InitializeRewriter;
import org.kframework.backend.java.symbolic.JavaBackend;
import org.kframework.backend.java.symbolic.JavaExecutionOptions;
import org.kframework.backend.java.symbolic.ProofExecutionMode;
import org.kframework.definition.Definition;
import org.kframework.kompile.CompiledDefinition;
import org.kframework.kompile.Kompile;
import org.kframework.kompile.KompileOptions;
import org.kframework.kore.K;
import org.kframework.kore.compile.KTokenVariablesToTrueVariables;
import org.kframework.krun.KRun;
import org.kframework.krun.KRunOptions;
import org.kframework.krun.api.io.FileSystem;
import org.kframework.krun.ioserver.filesystem.portable.PortableFileSystem;
import org.kframework.main.GlobalOptions;
import org.kframework.rewriter.Rewriter;
import org.kframework.utils.Stopwatch;
import org.kframework.utils.errorsystem.KExceptionManager;
import org.kframework.utils.file.FileUtil;
import org.kframework.utils.options.SMTOptions;

import java.io.File;
import java.lang.invoke.MethodHandle;
import java.util.Map;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Function;

import static org.kframework.Collections.*;
import static org.kframework.kore.KORE.*;

/**
 * KRunAPI
 */
public class KRunAPI {

    public static CompiledDefinition kompile(String def, String mainModuleName) {
        // tier-1 dependencies
        GlobalOptions globalOptions = new GlobalOptions();
        KompileOptions kompileOptions = new KompileOptions();
        KRunOptions krunOptions = new KRunOptions();
        JavaExecutionOptions javaExecutionOptions = new JavaExecutionOptions();

        // tier-2 dependencies
        KExceptionManager kem = new KExceptionManager(globalOptions);
        FileUtil files = FileUtil.get(globalOptions, System.getenv());

        Definition d = DefinitionParser.from(def, mainModuleName);

        Kompile kompile = new Kompile(kompileOptions, files, kem, false);
        Function<Definition, Definition> pipeline = new JavaBackend(kem, files, globalOptions, kompileOptions).steps(kompile);
        CompiledDefinition compiledDef = Kompile.run(d, kompileOptions, pipeline); // Kompile.runDefaultSteps(d, kompileOptions, kem);

        return compiledDef;
    }

    public static RewriterResult krun(CompiledDefinition compiledDef, String programText, Integer depth, String prove, String prelude) {

        GlobalOptions globalOptions = new GlobalOptions();
        KompileOptions kompileOptions = new KompileOptions();
        KRunOptions krunOptions = new KRunOptions();
        JavaExecutionOptions javaExecutionOptions = new JavaExecutionOptions();

        KExceptionManager kem = new KExceptionManager(globalOptions);
        FileUtil files = FileUtil.get(globalOptions, System.getenv());
        boolean ttyStdin = false;

        FileSystem fs = new PortableFileSystem(kem, files);
        Map<String, Provider<MethodHandle>> hookProvider = HookProvider.get(kem); // new HashMap<>();
        InitializeRewriter.InitializeDefinition initializeDefinition = new InitializeRewriter.InitializeDefinition();

        BiFunction<String, Source, K> programParser = compiledDef.getProgramParser(kem);
        K pgm = programParser.apply(programText, Source.apply("generated by api"));
        K program = KRun.parseConfigVars(krunOptions, compiledDef, kem, files, ttyStdin, pgm);

        /* TODO: figure out if it is needed
        program = new KTokenVariablesToTrueVariables()
                .apply(compiledDef.kompiledDefinition.getModule(compiledDef.mainSyntaxModuleName()).get(), program);
         */

        Rewriter rewriter = (InitializeRewriter.SymbolicRewriterGlue)
            new InitializeRewriter(
                fs,
                javaExecutionOptions,
                globalOptions,
                kem,
                kompileOptions.experimental.smt,
                hookProvider,
                kompileOptions,
                krunOptions,
                files,
                initializeDefinition)
            .apply(compiledDef.executionModule());

        if (prove == null) {
            RewriterResult result = ((InitializeRewriter.SymbolicRewriterGlue) rewriter).execute(program, Optional.ofNullable(depth));
            return result;
        } else {
            Stopwatch sw = new Stopwatch(globalOptions);
            krunOptions.experimental.prove = prove;
            krunOptions.experimental.smt.smtPrelude = prelude;
            ProofExecutionMode mode = new ProofExecutionMode(kem, krunOptions, sw, files, globalOptions);
            java.util.List<K> result = mode.execute(program, rewriter, compiledDef);
            System.out.println(result);
            return null;
        }
    }

    public static void kprint(CompiledDefinition compiledDef, RewriterResult result) {
        // tier-1 dependencies
        GlobalOptions globalOptions = new GlobalOptions();
        KompileOptions kompileOptions = new KompileOptions();
        KRunOptions krunOptions = new KRunOptions();
        JavaExecutionOptions javaExecutionOptions = new JavaExecutionOptions();

        // tier-2 dependencies
        KExceptionManager kem = new KExceptionManager(globalOptions);
        FileUtil files = FileUtil.get(globalOptions, System.getenv());

        // print output
        // from org.kframework.krun.KRun.run()
        KRun.prettyPrint(compiledDef, krunOptions.output, s -> KRun.outputFile(s, krunOptions, files), result.k());
    }

    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("usage: <def> <main-module> <pgm>");
            return;
        }
        String def = FileUtil.load(new File(args[0])); // "require \"domains.k\" module A syntax KItem ::= \"run\" endmodule"
        String pgm = FileUtil.load(new File(args[2])); // "run"

        String mainModuleName = args[1]; // "A"

        // kompile
        CompiledDefinition compiledDef = kompile(def, mainModuleName);

        // krun
        RewriterResult result = krun(compiledDef, pgm, null, null, null);

        // print
        kprint(compiledDef, result);

        // kprove
        String prove = args[3];
        String prelude = args[4];
        krun(compiledDef, pgm, null, prove, prelude);

        return;
    }

}
