// Copyright (c) 2015-2016 K Team. All Rights Reserved.

package org.kframework.kore.compile;

import org.junit.Assert;
import org.junit.Test;
import org.kframework.attributes.Source;
import org.kframework.definition.Module;
import org.kframework.definition.NonTerminal;
import org.kframework.definition.Production;
import org.kframework.definition.ProductionItem;
import org.kframework.definition.Terminal;
import org.kframework.kore.AbstractFoldK;
import org.kframework.kore.FoldK;
import org.kframework.kore.K;
import org.kframework.kore.KApply;
import org.kframework.kore.KLabel;
import org.kframework.kore.KToken;
import org.kframework.parser.ProductionReference;
import org.kframework.unparser.AddBrackets;
import org.kframework.unparser.KOREToTreeNodes;
import org.kframework.utils.KoreUtils;
import scala.Option;
import scala.collection.Set;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Optional;
import java.util.stream.Collectors;

import static org.junit.Assert.*;
import static org.kframework.Collections.*;

public class UnparsingTest {
    @Test
    public void simpleTest() throws URISyntaxException, IOException {
        String filename = "/compiler-tests/unparsing.k";
        KoreUtils utils = new KoreUtils(filename, "UNPARSING", "UNPARSING", false);

        K pgm = utils.programParser.apply("if x then 5 else 6", Source.apply("unparsing test"));

        System.out.println(pgm);

        String newUnparsed = unparse(pgm, utils.compiledDef.getParsedDefinition().mainModule());

        System.out.println("New unparsed: " + newUnparsed);


//        K kResult = utils.stepRewrite(utils.getParsed("x", Source.apply("generated by " + getClass().getSimpleName())), Optional.<Integer>empty());
//
        Module unparsingModule = utils.getUnparsingModule();

        ProductionReference backToTermForm = (ProductionReference) KOREToTreeNodes.apply(KOREToTreeNodes.up(unparsingModule, pgm), unparsingModule);

        ProductionReference withBrackets = new AddBrackets(unparsingModule).addBrackets(backToTermForm);

        String unparsed = KOREToTreeNodes.toString(withBrackets);

        System.out.println("Old unparsed: " + unparsed);
//
//        assertEquals("Execution failed", "<t> <k> foo </k> <b> x </b> </t>", actual);
    }

    private String unparse(K k, Module m) {
        if (k instanceof KApply) {
            KApply kApply = (KApply) k;
            Set<Production> productions = m.productionsFor().apply(kApply.klabel());
            Production p = productions.head();

            Option<String> unparseOption = p.att().get("unparse");

            if(unparseOption.isDefined()) {
                String format = unparseOption.get();
                System.out.println(format);
                return format;
            } else {
                ArrayList<String> res = new ArrayList<>();
                for (int i = 0, j = -1; i < p.items().size(); i++) {
                    ProductionItem productionItem = p.items().apply(i);
                    if (productionItem instanceof NonTerminal) {
                        j++;
                        K subTerm = kApply.items().get(j);
                        res.add(unparse(subTerm, m));
                    }
                    if (productionItem instanceof Terminal) {
                        Terminal terminal = (Terminal) productionItem;
                        res.add(terminal.value());
                    }
                }
                return res.stream().collect(Collectors.joining(" "));
            }
        }

        if (k instanceof KToken) {
            KToken kToken = (KToken) k;
            return kToken.s();
        }

        throw new AssertionError("Encountered unknown K type:" + k.getClass());
    }
}
