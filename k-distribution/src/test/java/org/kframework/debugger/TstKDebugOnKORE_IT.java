package org.kframework.debugger;

import org.junit.Before;
import org.junit.Test;
import org.junit.rules.TestName;
import org.kframework.attributes.Source;
import org.kframework.backend.unparser.OutputModes;
import org.kframework.definition.Module;
import org.kframework.kompile.CompiledDefinition;
import org.kframework.kore.K;
import org.kframework.krun.KRun;
import org.kframework.utils.KoreUtils;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;


/**
 * Created by Manasvi on 6/19/15.
 * <p>
 * Test File for the Debugger Interface Implementation
 */
public class TstKDebugOnKORE_IT {


    @org.junit.Rule
    public TestName name = new TestName();
    private static KoreUtils utils;

    protected File testResource(String baseName) throws URISyntaxException {
        return new File(TstKDebugOnKORE_IT.class.getResource(baseName).toURI());
    }

    //@Todo(Manasvi): Find solution for this hack. No need for a @Before.
    @Before
    public  void setup() throws IOException, URISyntaxException {
        String filename = "/convertor-tests/" + name.getMethodName() + ".k";
        utils = new KoreUtils(filename);
    }


    @Test
    public void kore_imp() throws IOException, URISyntaxException {
        String pgm = "int s, n; n = 10; while(0<=n) { s = s + n; n = n + -1; }";
        K parsed = utils.getParsed(pgm, Source.apply("generated by " + getClass().getSimpleName()));
        KDebug debuggerSession = new KoreKDebug(parsed, utils.getRewriter());
        K kResult = debuggerSession.step(10).getCurrentK();
        Module unparsingModule = utils.getUnparsingModule();
        CompiledDefinition compiledDef = utils.getCompiledDef();
        KRun.prettyPrint(compiledDef, OutputModes.PRETTY, s -> System.err.println(s), kResult);

    }
}
